C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE PERIPH
OBJECT MODULE PLACED IN periph.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE periph.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      periph.c
   3          //   Contents:  Hooks required to implement USB peripheral function.
   4          //
   5          // $Archive: /USB/Target/Fw/fx2lp/periph.c $
   6          // $Date: 9/01/03 2:17p $
   7          // $Revision: 1 $
   8          //
   9          //
  10          //-----------------------------------------------------------------------------
  11          // Copyright 2003, Cypress Semiconductor Corporation
  12          //
  13          // This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  14          // protected by United States copyright laws and international treaty provisions. Cypress
  15          // hereby grants to Licensee a personal, non-exclusive, non-transferable license to copy,
  16          // use, modify, create derivative works of, and compile the Cypress Source Code and
  17          // derivative works for the sole purpose of creating custom software in support of Licensee
  18          // product ("Licensee Product") to be used only in conjunction with a Cypress integrated
  19          // circuit. Any reproduction, modification, translation, compilation, or representation of this
  20          // software except as specified above is prohibited without the express written permission of
  21          // Cypress.
  22          //
  23          // Disclaimer: Cypress makes no warranty of any kind, express or implied, with regard to
  24          // this material, including, but not limited to, the implied warranties of merchantability and
  25          // fitness for a particular purpose. Cypress reserves the right to make changes without
  26          // further notice to the materials described herein. Cypress does not assume any liability
  27          // arising out of the application or use of any product or circuit described herein. Cypressí
  28          // products described herein are not authorized for use as components in life-support
  29          // devices.
  30          //
  31          // This software is protected by and subject to worldwide patent coverage, including U.S.
  32          // and foreign patents. Use may be limited by and subject to the Cypress Software License
  33          // Agreement.
  34          //-----------------------------------------------------------------------------
  35          #pragma NOIV               // Do not generate interrupt vectors
  36          
  37          #include "lp.h"
  38          #include "lpregs.h"
  39          #include "syncdly.h"
  40          
  41          extern BOOL   GotSUD;         // Received setup data flag
  42          extern BOOL   Sleep;
  43          extern BOOL   Rwuen;
  44          extern BOOL   Selfpwr;
  45          
  46          BYTE   Configuration;      // Current configuration
  47          BYTE   AlternateSetting;   // Alternate settings
  48          
  49          //-----------------------------------------------------------------------------
  50          // Task Dispatcher hooks
  51          //   The following hooks are called by the task dispatcher.
  52          //-----------------------------------------------------------------------------
  53          
  54          
  55          void TD_Init(void)             // ≥ı ºªØ≥Ã–Ú∂Œ
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 2   

  56          {
  57   1              
  58   1              int i;
  59   1              BYTE Display=0xFF;//;
  60   1              
  61   1              BREAKPT &= ~bmBPEN;      
  62   1              Rwuen = TRUE;            //  πƒ‹‘∂≥ÃªΩ–—
  63   1              OEA=0xFF;                               //OEA∂®“ÂŒ™ ‰≥ˆ∂Àø⁄
  64   1              CPUCS=((CPUCS & ~bmCLKSPD) | bmCLKSPD1);                //USB ±÷”∆µ¬ 
  65   1              IFCONFIG |=0x40;
  66   1              
  67   1      /*      //¥”◊ÛµΩ”““¿¥Œµ„¡¡4’µµ∆
  68   1              for(i=0;i<=8;i++)
  69   1              {
  70   1                      IOA=Display;
  71   1                      Display=Display>>1;
  72   1                      EZUSB_Delay(500);
  73   1              }
  74   1              
  75   1              //4’µµ∆¡¡√…¡À∏5¥Œ
  76   1              for(i=0;i<5;i++)
  77   1              {
  78   1                      IOA=0xFF;
  79   1                      EZUSB_Delay(500);
  80   1                      
  81   1                      IOA=0x00;
  82   1                      EZUSB_Delay(500);
  83   1              }
  84   1      
  85   1              //4’µµ∆œ®√
  86   1              IOA=0xFF;
  87   1      */
  88   1      }
*** WARNING C280 IN LINE 58 OF PERIPH.C: 'i': unreferenced local variable
  89          
  90          void TD_Poll(void)             // USBø’œ–µƒ ±∫Ú—≠ª∑µ˜”√
  91          {
  92   1      
  93   1        }
  94          
  95          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
  96          {
  97   1              return(TRUE);
  98   1      }
  99          
 100          BOOL TD_Resume(void)          // Called after the device resumes
 101          {
 102   1              return(TRUE);
 103   1      }
 104          
 105          //-----------------------------------------------------------------------------
 106          // Device Request hooks
 107          //   The following hooks are called by the end point 0 device request parser.
 108          //-----------------------------------------------------------------------------
 109          
 110          BOOL DR_GetDescriptor(void)
 111          {
 112   1              return(TRUE);
 113   1      }
 114          
 115          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 116          {
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 3   

 117   1              Configuration = SETUPDAT[2];
 118   1              return(TRUE);            // Handled by user code
 119   1      }
 120          
 121          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 122          {
 123   1              EP0BUF[0] = Configuration;
 124   1              EP0BCH = 0;
 125   1              EP0BCL = 1;
 126   1              return(TRUE);            // Handled by user code
 127   1      }
 128          
 129          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 130          {
 131   1              AlternateSetting = SETUPDAT[2];
 132   1              return(TRUE);            // Handled by user code
 133   1      }
 134          
 135          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 136          {
 137   1              EP0BUF[0] = AlternateSetting;
 138   1              EP0BCH = 0;
 139   1              EP0BCL = 1;
 140   1              return(TRUE);            // Handled by user code
 141   1      }
 142          
 143          BOOL DR_GetStatus(void)
 144          {
 145   1              return(TRUE);
 146   1      }
 147          
 148          BOOL DR_ClearFeature(void)
 149          {
 150   1              return(TRUE);
 151   1      }
 152          
 153          BOOL DR_SetFeature(void)
 154          {
 155   1              return(TRUE);
 156   1      }
 157          
 158          BOOL DR_VendorCmnd(void)
 159          {
 160   1              switch (SETUPDAT[1])
 161   1              {
 162   2              case 0xDD:
 163   2                      {
 164   3                              OEA=0xFF;
 165   3                              IOA=0x4C;
 166   3                              *EP0BUF=0xDD;
 167   3                              EP0BCH=0;
 168   3                              EP0BCL=1;
 169   3                              EP0CS |=bmHSNAK;
 170   3                              break;
 171   3                      }
 172   2              default:
 173   2                      return(TRUE);
 174   2              }
 175   1              return(FALSE);
 176   1      }
 177          
 178          BOOL DR_LED1(void)        //◊‘∂®“Â«Î«Û
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 4   

 179          {
 180   1              EP0BUF[0]=0xA1;
 181   1              EP0BCH=0;
 182   1              EP0BCL=2;
 183   1              EZUSB_Delay(100);
 184   1              IOE=EP0BUF[1];
 185   1              EP0CS |= bmHSNAK;
 186   1              return(TRUE);
 187   1      }
 188          
 189          //-----------------------------------------------------------------------------
 190          // USB Interrupt Handlers
 191          //   The following functions are called by the USB interrupt jump table.
 192          //-----------------------------------------------------------------------------
 193          
 194          // Setup Data Available Interrupt Handler
 195          void ISR_Sudav(void) interrupt 0
 196          {
 197   1              GotSUD = TRUE;            // Set flag
 198   1              EZUSB_IRQ_CLEAR();
 199   1              USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 200   1      }
 201          
 202          // Setup Token Interrupt Handler
 203          void ISR_Sutok(void) interrupt 0
 204          {
 205   1              EZUSB_IRQ_CLEAR();
 206   1              USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 207   1      }
 208          
 209          void ISR_Sof(void) interrupt 0
 210          {
 211   1              EZUSB_IRQ_CLEAR();
 212   1              USBIRQ = bmSOF;            // Clear SOF IRQ
 213   1      }
 214          
 215          void ISR_Ures(void) interrupt 0
 216          {
 217   1              // whenever we get a USB reset, we should revert to full speed mode
 218   1              pConfigDscr = pFullSpeedConfigDscr;
 219   1              ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 220   1              pOtherConfigDscr = pHighSpeedConfigDscr;
 221   1              ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 222   1              
 223   1              EZUSB_IRQ_CLEAR();
 224   1              USBIRQ = bmURES;         // Clear URES IRQ
 225   1      }
 226          
 227          void ISR_Susp(void) interrupt 0
 228          {
 229   1              Sleep = TRUE;
 230   1              EZUSB_IRQ_CLEAR();
 231   1              USBIRQ = bmSUSP;
 232   1      }
 233          
 234          void ISR_Highspeed(void) interrupt 0
 235          {
 236   1              if (EZUSB_HIGHSPEED())
 237   1              {
 238   2                      pConfigDscr = pHighSpeedConfigDscr;
 239   2                      ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 240   2                      pOtherConfigDscr = pFullSpeedConfigDscr;
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 5   

 241   2                      ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 242   2              }
 243   1              
 244   1              EZUSB_IRQ_CLEAR();
 245   1              USBIRQ = bmHSGRANT;
 246   1      }
 247          void ISR_Ep0ack(void) interrupt 0
 248          {
 249   1      }
 250          void ISR_Stub(void) interrupt 0
 251          {
 252   1      }
 253          void ISR_Ep0in(void) interrupt 0
 254          {
 255   1      }
 256          void ISR_Ep0out(void) interrupt 0
 257          {
 258   1      }
 259          void ISR_Ep1in(void) interrupt 0
 260          {
 261   1      }
 262          void ISR_Ep1out(void) interrupt 0
 263          {
 264   1      }
 265          void ISR_Ep2inout(void) interrupt 0
 266          {
 267   1      }
 268          void ISR_Ep4inout(void) interrupt 0
 269          {
 270   1      }
 271          void ISR_Ep6inout(void) interrupt 0
 272          {
 273   1      }
 274          void ISR_Ep8inout(void) interrupt 0
 275          {
 276   1      }
 277          void ISR_Ibn(void) interrupt 0
 278          {
 279   1      }
 280          void ISR_Ep0pingnak(void) interrupt 0
 281          {
 282   1      }
 283          void ISR_Ep1pingnak(void) interrupt 0
 284          {
 285   1      }
 286          void ISR_Ep2pingnak(void) interrupt 0
 287          {
 288   1      }
 289          void ISR_Ep4pingnak(void) interrupt 0
 290          {
 291   1      }
 292          void ISR_Ep6pingnak(void) interrupt 0
 293          {
 294   1      }
 295          void ISR_Ep8pingnak(void) interrupt 0
 296          {
 297   1      }
 298          void ISR_Errorlimit(void) interrupt 0
 299          {
 300   1      }
 301          void ISR_Ep2piderror(void) interrupt 0
 302          {
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 6   

 303   1      }
 304          void ISR_Ep4piderror(void) interrupt 0
 305          {
 306   1      }
 307          void ISR_Ep6piderror(void) interrupt 0
 308          {
 309   1      }
 310          void ISR_Ep8piderror(void) interrupt 0
 311          {
 312   1      }
 313          void ISR_Ep2pflag(void) interrupt 0
 314          {
 315   1      }
 316          void ISR_Ep4pflag(void) interrupt 0
 317          {
 318   1      }
 319          void ISR_Ep6pflag(void) interrupt 0
 320          {
 321   1      }
 322          void ISR_Ep8pflag(void) interrupt 0
 323          {
 324   1      }
 325          void ISR_Ep2eflag(void) interrupt 0
 326          {
 327   1      }
 328          void ISR_Ep4eflag(void) interrupt 0
 329          {
 330   1      }
 331          void ISR_Ep6eflag(void) interrupt 0
 332          {
 333   1      }
 334          void ISR_Ep8eflag(void) interrupt 0
 335          {
 336   1      }
 337          void ISR_Ep2fflag(void) interrupt 0
 338          {
 339   1      }
 340          void ISR_Ep4fflag(void) interrupt 0
 341          {
 342   1      }
 343          void ISR_Ep6fflag(void) interrupt 0
 344          {
 345   1      }
 346          void ISR_Ep8fflag(void) interrupt 0
 347          {
 348   1      }
 349          void ISR_GpifComplete(void) interrupt 0
 350          {
 351   1      }
 352          void ISR_GpifWaveform(void) interrupt 0
 353          {
 354   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    422    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V7.50   PERIPH                                                                05/12/2010 22:19:47 PAGE 7   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
